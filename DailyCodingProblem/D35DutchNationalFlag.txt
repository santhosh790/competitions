Given an array of strictly the characters 'R', 'G', and 'B', segregate the values of the array so that all the Rs come first, the Gs come second, and the Bs come last. You can only swap elements of the array.

Do this in linear time and in-place.

For example, given the array ['G', 'B', 'R', 'R', 'B', 'R', 'G'], it should become ['R', 'R', 'R', 'G', 'G', 'B', 'B'].

Solution idea::
The 'G's are always in the middle somewhere in the sorted list. The idea is to move / swap the 'R's to the front of the 'G''s and the B's after the G. Plenty of examples on the web that shows how to do this with a simple linear search / swap.

On linear traversal:
	Keep 2 pointers. one at the beginning, the other at the end. 
	On encountering R, move it to the first pointer location, increment it
	On encountering B, move it to the second pointer location, decrement it.
	On encountering G, do nothing.